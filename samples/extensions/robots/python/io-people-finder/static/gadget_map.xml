<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="UpDown" height="500" width="100%">
   <Require feature="wave"></Require>
  </ModulePrefs>
<Content type="html">
<![CDATA[<html><head>
<script src="http://www.google.com/jsapi"></script>
<script src="http://imagine-it.org/google/wave/markerclusterer.js"></script>
<script type="text/javascript">
google.load('maps', '3', {
 other_params: 'sensor=false'
});

var map;
var bounds;
var markerClusterer;
var markersAdded;
var viewerMarker;
var infoWindow;
var ICON_URL = 'http://chart.apis.google.com/chart?cht=mm&chs=24x32&chco=FFFFFF,008CFF,000000&ext=.png';

function makeJSONRequest(path, callback) {
  var baseUrl = "http://io-2010-peoplefinder-bot.appspot.com/web/";
  var params = {};
  params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
  params[gadgets.io.RequestParameters.REFRESH_INTERVAL] = 1;
  gadgets.io.makeRequest(baseUrl + path, callback, params);
}

function showAddress(address) {
  var  country = '00';
  var geocoder = new google.maps.Geocoder();
  geocoder.geocode( { 'address': address}, function(results, status) {
    if (status == google.maps.GeocoderStatus.OK) {
      var result = results[0];
      var position = results[0].geometry.location;
      if (viewerMarker) {
        viewerMarker.setPosition(position);
      } else {
        viewerMarker = new google.maps.Marker({
           map: map,
           position: position
        });
      }
      infoWindow.setContent("Saving...");
      infoWindow.open(map, viewerMarker);
      for (var i = 0; i < result.address_components.length; i++) {
        var address_component = result.address_components[i];
        for (var j = 0; j < address_component.types.length; j++) {
          if (address_component.types[j] == 'country') {
            var country = address_component.short_name;
          }
        }
      }
      var viewer = wave.getViewer();
      var path = "savelocation?viewer_id=" + viewer.getId() + "&viewer_name=" + escape(viewer.getDisplayName()) + "&viewer_thumbnail=" + escape(viewer.getThumbnailUrl()) + "&latlng=" + position.toUrlValue(4) + "&country=" + country;
      makeJSONRequest(path, saveLocationCallback);
    } else {
      alert("Address not found");
    }
  });
}

function saveLocationCallback() {
  infoWindow.close();
}

/**
 * Updates vote status information when the user clicks thumbs up or down.
 * @param {string} dir The direction the user pressed (plus or minus).
 */
function saveLocation() {
  var viewerId = wave.getViewer().getId();
  var viewerData = {latlng: viewerMarker.getPosition().toUrlValue(6)};
  var delta = {};
  delta[viewerId] = JSON.stringify(viewerData);
  wave.getState().submitDelta(delta);
}

/**
 * Updates the html of the page to reflect the vote status information.
 */
function stateUpdated() {
  if (viewerMarker) {
    viewerMarker.setMap(null);
  }
  var state = wave.getState();
  if (state) {
    var markers = [];
    var locationsAdded = {};
    bounds = new google.maps.LatLngBounds();
    var allKeys = state.getKeys();
    if (allKeys.length == 0) { return; }
    for (var i = 0; i < allKeys.length; i++) {
      var key = allKeys[i];
      var viewerData = state.get(key).split(',')
      var latlngString = viewerData[0] + ',' + viewerData[1];
      if (locationsAdded[latlngString]) {
        locationsAdded[latlngString].push(key);
      } else {
        locationsAdded[latlngString] = [key];
      }
    }
    for (var location in locationsAdded) {
      var participantKeys = locationsAdded[location];
      var lat = parseFloat(location.split(",")[0]);
      var lng = parseFloat(location.split(",")[1]);
      var latlng = new google.maps.LatLng(lat, lng);
      bounds.extend(latlng);
      var marker = new google.maps.Marker({icon: ICON_URL, position: latlng});
      marker.clusterCount = participantKeys.length;
      markersAdded[key] = marker;
      attachInfoWindow(marker, participantKeys);
      markers.push(marker);
    }
    if (markerClusterer) {
      markerClusterer.clearMarkers();
      markerClusterer.addMarkers(markers);
    } else {
      markerClusterer = new MarkerClusterer(map, markers);         
    }
    zoomToBounds();
  }
}

function attachInfoWindow(marker, participants) {
  for (var i = 0; i < participants.length; i++) {
    // pop open info window if viewer
  }
  google.maps.event.addListener(marker, 'click', function() {
    var path = 'getpersoninfo?participant_ids=' + participants.join(',');
    infoWindow.setContent(('<div id="personinfo">Loading info..</div>'));
    infoWindow.open(map, marker);
    makeJSONRequest(path, getPersonInfoCallback);
  });
}

function getPersonInfoCallback(obj) {
  var personInfo = obj.data;
  var html = [];
  for (var i = 0; i < personInfo.length; i++) {
    html.push('<div><img style="float:left" src="' + personInfo[i].thumbnail + '" width="30" height="30"> ' + personInfo[i].name + '<br><span class="littletext">' + personInfo[i].address + '</span></div>');
  }
  infoWindow.setContent(html.join('<br>'));
}

function zoomToBounds() {
  map.fitBounds(bounds);
}

function init() {
  makeMap();
  if (wave && wave.isInWaveContainer()) {
    wave.setStateCallback(stateUpdated);
  }
  stateUpdated();
}

function makeMap() {
  var center = new google.maps.LatLng(39.91, 116.38);
  map = new google.maps.Map(document.getElementById('map'), {
        zoom: 3,
        center: center,
        mapTypeId: google.maps.MapTypeId.ROADMAP
  });
  infoWindow = new google.maps.InfoWindow();
  markersAdded = {};
  var iconUrl = "http://chart.apis.google.com/chart?cht=d&chdp=mapsapi&chl=pin'i\\'[10'-2'f\\hv'a\\]h\\]o\\008eff'fC\\000000'tC\\000000'eC\\Lauto'f\\&ext=.png";
}

gadgets.util.registerOnLoadHandler(init);
</script>
<style>
.littletext {
  font-size: small;
}
</style>
</head>
<body>
<div id="gadget-wrapper">
<form action="#" onsubmit="showAddress(this.address.value); return false"> 
   <p>
     <input type="text" style="width:350px" name="address" value="" /> 
     <input type="submit" value="Add Me!" />
     <input type="button" value="View Everyone" onclick="zoomToBounds()"/>
  </p>
</form>
<div id="map" style="width:600px;height:400px;"></div> 
</div>
</body>
</html>
]]></Content>
</Module>
