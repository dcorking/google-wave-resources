<Module>
  <ModulePrefs
    title="Magnetic Fridge Poetry"
    description="Create poetry by moving words around in the gadget like they were sitting on your fridge"
    author="Douwe Osinga"
    author_email="douwe@gmail.com">
   <Require feature="wave"/>
  </ModulePrefs>
  <Content type="html">
  <![CDATA[
<script src="http://wave-api-dmo.appspot.com/public/jquery.js"></script>
<script src="http://wave-api-dmo.appspot.com/public/jquery-ui.js"></script>
<script src="http://google-wave-resources.googlecode.com/svn/trunk/samples/extensions/gadgets/fridge/jquery.addons.js"></script>
<link href="http://fonts.googleapis.com/css?family=Cabin:regular" rel="stylesheet" type="text/css" />
<script>
var defaultWords = "see|the|stone|set|in|your|eyes|i|wait|for|you|you|gave|it|all" +
            "|but|i|want|more|my|hands|are|tied|my|body|bruised|and|nothing" +
            "|else|to|lose|carefree|days|and|summer|sounds|my|feeble|ways|is" +
            "|and|we|green|and|you've|been|hoping|this|year|will|be|better|than|the|last";
defaultWords = defaultWords.split("|");
var currentState;
var words;

function stateUpdated(state, changedState) {
  currentState = state;

  if (!state.get('words')) {
    showStart();
    return;
  }

  if ($('#word_0').length == 0) {
    words = state.get('words').split('|');
    setupWords();
  }

  var keys = [];
  for (var key in changedState) {
    keys.push(key);
  }
  redrawWords(keys);
}

function showStart() {
  $('#trigger').overlay({load: true, target: $('#startscreen')});
  var overlay = $('#trigger').data('overlay');

  $('#default-button').click(function() {
    words = defaultWords;
    setupWords(true);
    overlay.close();
  });

  $('#custom-button').click(function() {
    // remove punctuation?
    var text =  $('#custom-text').val().replace(/[";:,.\/?\\-]/g, '');
    text = text.replace(/\s+/g, '|');
    // todo - alert if no words entered
    words = text.split('|');
    setupWords(true);
    overlay.close();
  });
}

function redrawWords(keys) {
  if (!currentState) return;
  var keys = keys || currentState.getKeys();
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (key.indexOf('word_') == -1) continue;
    var value = currentState.get(key);
    var position = getposition(value);
    var currentPosition =  $('#' + key).position();
    if (!position || !currentPosition) continue;
    var leftDiff = Math.abs(position.left - currentPosition.left);
    var topDiff = Math.abs(position.top - currentPosition.top);
    if (leftDiff > 1 || topDiff > 1) {
      $('#' + key).css({left: position.left + 'px', top: position.top + 'px', position:'absolute'});
    }
    var id = value.split('|')[2];
    styleWord(id, key);
  }
}

function styleWord(id, key) {
  if (id != 'computer') {
    $('#' + key).css({backgroundColor: getColor(id)});
    var poet = wave.getParticipantById(id);
    var name = poet.getDisplayName();
    if (id == wave.getViewer().getId()) { 
      name = 'You';
    }
    $('#' + key).attr('title', name);
    $('#' + key).tooltip();
  }
}

function hashCode(str) { // java String#hashCode
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
       hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    return hash;
} 

function intToARGB(i){
    return ((i>>16)&0xFF).toString(16) + 
           ((i>>8)&0xFF).toString(16) + 
           (i&0xFF).toString(16);
}

function getColor(str) {
  return intToARGB(hashCode(str));
}

function getposition(value) {
  var pos = value.split('|');
  var left = parseFloat(pos[0]);
  var top = parseFloat(pos[1]);
  return {left: left, top: top};
}


function setupWords(firstTime) {  
  var delta = {};
  for (var i = 0; i < words.length; ++i) {
    var word = words[i];
    if (word.length == 0) {
      words.splice(i, 1);
      continue;
    }
    var div = makeWord(i, word);
    if (firstTime) {
      var wordWidth = (word.length * 8) + 15
      x = Math.ceil(($(window).width() - wordWidth) * Math.random());
      y = Math.ceil(($(window).height() - 50) * Math.random());
      delta['word_' + i] = '' + x + '|' + y + '|computer';
      var position = getposition(delta['word_' + i]);
      div.css({left: position.left + 'px', top: position.top + 'px', position:'absolute'});
    }
    $("#container").append(div);
  }
  if (firstTime) {
    delta['words'] = words.join('|');
    wave.getState().submitDelta(delta);
  }
}

function makeWord(num, word, firstTime) {
  var html = '<div class="block" id="word_' + num + '" >' + word + '</div>';
  div = $(html);
  div.draggable({start: function() { $('#tooltip').hide() }});

  div.mouseup(function(){
    var delta = {};
    var position = $(this).position();
    delta[$(this).attr('id')] = position.left + '|' + position.top + '|' + wave.getViewer().getId();
    wave.getState().submitDelta(delta);
    styleWord(wave.getViewer().getId(), $(this).attr('id'));
  });
  div.bind('selectstart', function () { return false; });
  return div;
}
  
  
function main() {
  wave.setStateCallback(stateUpdated);

  $(window).resize(function() {
    redrawWords();
  });
}

gadgets.util.registerOnLoadHandler(main);
</script>
<style>
body {
  background: #363636;
  background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#363636), to(#666666));
  overflow-y: auto;
  overflow-x: auto;
}

.block {
  border-left: 1px solid #101010;
  border-top: 1px solid #101010;
  border-right: 2px solid #101010;
  border-bottom: 2px solid #101010;
  background-color: #F8F8F8;
  margin: 3px;
  display: block;
  padding: 3px;
  cursor: pointer;
  font-family: 'Cabin', serif;
  font-size: 16px;
  font-weight: bold;
  position: absolute;
}

#tooltip {
  position: absolute;
  z-index: 3000;
  border: 1px solid #111;
  background-color: #eee;
  padding: 5px;
  opacity: 0.85;
  font-size: 14px;
  font-weight: normal;
}

#tooltip h3, #tooltip div {
  margin: 0;
}

.simple_overlay {
  display: none;
  z-index: 10000;
  padding: 10px;
  background-color: #eee;
  width: 300px;	
  min-height: 200px;
  border:1px solid #666;
  -moz-box-shadow:0 0 5px 5px #000;
  -webkit-box-shadow: 0 0 5px #000;	
}

/* close button positioned on upper right corner */
.simple_overlay .close {
  display: none;
}

button {
  background: #F6F6F6;
  background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(white), to(#EFEFEF));
  background-image: -moz-linear-gradient(top, #fff, #EFEFEF);
  border: 1px solid #CCC;
  -moz-border-radius: 3px 3px;
  -webkit-border-radius: 3px 3px;
  border-radius: 3px 3px;
  color: black;
  cursor: pointer;
  height: 2.0833em;
  overflow: visible;
  padding: 0px 0.5em;
  vertical-align: middle;
  white-space: nowrap;
  padding: 5px;
  margin-top: 3px;
  margin-bottom: 5px;
}

button:hover, button:focus {
  border-color: #999;
  background: #f3f3f3;
  background-image: -webkit-gradient(linear,left top,left bottom,from(#ffffff),to(#ebebeb));
  background-image: -moz-linear-gradient(top,#ffffff,#ebebeb);
  outline: 0;
  -moz-box-shadow: 0 0 3px #999;
  -webkit-box-shadow: 0 0 3px #999;
  box-shadow: 0 0 3px #999;
}

#startscreen textarea {
  width: 300px;
  height: 60px;
}
</style>
<div id="container" style="width:100%; height:100%; border: 0px; position:relative">
</div>

<a id="trigger" href="#" rel="#startscreen" style="display:none">Start</a>
<div class="simple_overlay" id="startscreen">
 <p>To use the default set of words, click here:</p>
 <button id="default-button">Load Default Words</button>
 <br>
 <p>To use your own words, paste up to 500 characters of text here:</p>
 <textarea id="custom-text"></textarea>
 <Br>
 <button id="custom-button">Load Custom Words</button>
</div>

]]></Content>
</Module>
